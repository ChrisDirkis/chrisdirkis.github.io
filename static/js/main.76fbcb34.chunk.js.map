{"version":3,"sources":["components/SpinnyThingy.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["SpinnyThingy","props","position","mousePosition","p","mp","ap","x","w","y","h","angle","Math","atan2","distance","sqrt","opacity","min","max","style","useMemo","left","top","width","height","borderRadius","backgroundColor","transform","App","useMousePosition","ref","mousePos","elementWidth","elementHeight","useState","mousePosStored","setMousePosStored","spinnyThingies","Array","keys","map","i","j","key","flat","className","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAQaA,EAAuC,SAACC,GAAW,IAAD,iBACZA,GAAxCC,EADoD,EACpDA,SAAUC,EAD0C,EAC1CA,cACXC,GAFqD,4CAEjDF,GACJG,EAAKF,EACLG,EAASF,EAAEG,EAAI,IAAMF,EAAGG,EAAxBF,EAA8BF,EAAEK,EAAI,IAAMJ,EAAGK,EAE7CC,EAAQC,KAAKC,MAAMR,EAAGI,EAAIH,EAAMD,EAAGE,EAAID,GAEvCQ,EAAWF,KAAKG,MAAMV,EAAGE,EAAID,IAASD,EAAGE,EAAID,IAASD,EAAGI,EAAIH,IAASD,EAAGI,EAAIH,IAC7EU,EAAU,EAAIJ,KAAKK,IAAI,EAAGH,GAAmC,GAAvBF,KAAKM,IAAIb,EAAGG,EAAGH,EAAGK,KAExDS,EAA6BC,mBAAQ,WACvC,MAAO,CACHlB,SAAU,WACVmB,KAAMnB,EAASK,EAAI,IACnBe,IAAKpB,EAASO,EAAI,IAClBc,MAAO,MACPC,OAAQ,MACRC,aAAc,MACdC,gBAAiB,OACjBV,QAASA,EACTW,UAAU,4CAAD,OAA8ChB,EAA9C,WAEd,CAACT,EAASK,EAAGL,EAASO,EAAGE,EAAOK,IAKnC,OAAO,yBAAMG,MAAOA,K,MCmBTS,MAhDf,WAAgB,IAAD,EACgBC,YAAiB,EAAG,EAAG,IADvC,mBACN1B,EADM,KACS2B,EADT,KAGPC,EAAWX,mBAAQ,WACvB,OAAwB,OAApBjB,EAAcI,GAAkC,OAApBJ,EAAcM,GACb,OAA/BN,EAAc6B,cAAyD,OAAhC7B,EAAc8B,cAC9C,CAAC1B,EAAG,GAAIE,EAAG,GAAID,EAAG,IAAKE,EAAG,KAE5B,CACLH,EAAGJ,EAAcI,EACjBE,EAAGN,EAAcM,EACjBD,EAAGL,EAAc6B,aACjBtB,EAAGP,EAAc8B,iBAElB,CAAC9B,IAdS,EAgB+B+B,mBAAS,CAAC3B,EAAG,GAAIE,EAAG,GAAID,EAAG,IAAKE,EAAG,MAhBlE,mBAgBNyB,EAhBM,KAgBUC,EAhBV,KAkBW,OAApBjC,EAAcI,GACf4B,EAAe5B,IAAMwB,EAASxB,GAAK4B,EAAe1B,IAAMsB,EAAStB,GAClE0B,EAAe3B,IAAMuB,EAASvB,GAAK2B,EAAezB,IAAMqB,EAASrB,GACjE0B,EAAkBL,GAGpB,IAAMM,EAAiBjB,mBAAQ,kBAAM,YAAIkB,MAAM,GAAGC,QAAQC,KAAI,SAAAC,GAC1D,OAAO,YAAIH,MAAM,GAAGC,QAAQC,KAAI,SAAAE,GAC9B,OAAO,kBAAC,EAAD,CAAcC,IAAKF,EAAI,IAAOC,EACnCxC,SAAU,CAACK,EAAG,GAAS,GAAJkC,EAAQhC,EAAG,GAAS,GAAJiC,GACnCvC,cAAegC,UAElBS,SACH,CAACT,IAEH,OACE,yBAAKU,UAAU,MAAMf,IAAKA,GACvBO,EACD,yBAAKQ,UAAU,qBACb,yBAAKA,UAAU,WACb,yBAAK1B,MAAO,CAAC2B,OAAQ,QACnB,6CAAkB,6CAAlB,aACA,0DCnCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.76fbcb34.chunk.js","sourcesContent":["import React, { FC, useMemo } from 'react';\r\n\r\ninterface ISpinnyThingyProps {\r\n    position: {x: number, y: number}\r\n    mousePosition: {x: number, y: number, w: number, h: number}\r\n}\r\n\r\n\r\nexport const SpinnyThingy: FC<ISpinnyThingyProps> = (props) => {\r\n    const {position, mousePosition, ...rest} = {...props};\r\n    const p = position;\r\n    const mp = mousePosition;\r\n    const ap = {x: p.x / 100 * mp.w, y: p.y / 100 * mp.h};\r\n    \r\n    const angle = Math.atan2(mp.y - ap.y, mp.x - ap.x);\r\n\r\n    const distance = Math.sqrt((mp.x - ap.x) * (mp.x - ap.x) + (mp.y - ap.y) * (mp.y - ap.y));\r\n    const opacity = 1 - Math.min(1, distance / (Math.max(mp.w, mp.h) * 0.5));\r\n\r\n    const style: React.CSSProperties = useMemo(() => {\r\n        return {\r\n            position: \"absolute\",\r\n            left: position.x + \"%\",\r\n            top: position.y + \"%\",\r\n            width: \"8em\",\r\n            height: \"5em\",\r\n            borderRadius: \"3em\",\r\n            backgroundColor: \"#888\",\r\n            opacity: opacity,\r\n            transform: `translateX(-50%) translateY(-50%) rotate(${angle}rad)`, \r\n        };\r\n    }, [position.x, position.y, angle, opacity]);\r\n\r\n\r\n\r\n    \r\n    return <div  style={style}>\r\n    </div>;\r\n}","import React, { useMemo, useState } from 'react';\nimport useMousePosition from '@react-hook/mouse-position'\n\nimport { SpinnyThingy } from './components/SpinnyThingy';\n\nimport './App.css';\n\nfunction App() {\n  const [mousePosition, ref] = useMousePosition(0, 0, 30);\n\n  const mousePos = useMemo(() => {\n    if (mousePosition.x === null || mousePosition.y === null || \n      mousePosition.elementWidth === null || mousePosition.elementHeight === null) {\n      return {x: 50, y: 50, w: 100, h: 100};\n    }\n    return {\n      x: mousePosition.x,\n      y: mousePosition.y,\n      w: mousePosition.elementWidth,\n      h: mousePosition.elementHeight,\n    }\n  }, [mousePosition]);\n\n  const [mousePosStored, setMousePosStored] = useState({x: 50, y: 50, w: 100, h: 100});\n\n  if (mousePosition.x !== null && \n    (mousePosStored.x !== mousePos.x || mousePosStored.y !== mousePos.y || \n    mousePosStored.w !== mousePos.w || mousePosStored.h !== mousePos.h)) {\n    setMousePosStored(mousePos);\n  }\n\n  const spinnyThingies = useMemo(() => [...Array(5).keys()].map(i => {\n      return [...Array(5).keys()].map(j => {\n        return <SpinnyThingy key={i + 1000 * j} \n          position={{x: 10 + i * 20, y: 10 + j * 20}} \n          mousePosition={mousePosStored}/>\n      });\n    }).flat()\n  , [mousePosStored]);\n\n  return (\n    <div className=\"app\" ref={ref}>\n      {spinnyThingies}\n      <div className=\"content-container\">\n        <div className=\"content\">\n          <div style={{margin: \"2em\"}}>\n            <h2>welcome to my <del>twisted mind</del> homepage</h2>\n            <p>email: me@chrisdirk.is</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}