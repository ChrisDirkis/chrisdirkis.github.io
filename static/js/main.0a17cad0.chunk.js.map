{"version":3,"sources":["Components/Card.tsx","Pages/Home.tsx","serviceWorker.js","Components/Header.tsx","Pages/siteLab.tsx","index.tsx"],"names":["Card","props","className","onClick","path","window","location","hash","name","children","src","imageHref","alt","imageAlt","cards","content","Home","map","c","key","Boolean","hostname","match","Header","style","gridArea","href","siteLab","ReactDOM","render","StrictMode","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQAqCeA,G,YAtBc,SAACC,GAE1B,OACI,oCACI,yBAAKC,UAAU,OAAOC,QAAS,kBAR1BC,EAQwCH,EAAMG,UAP3DC,OAAOC,SAASC,KAAOH,GADX,IAACA,IASD,yBAAKF,UAAU,mBACX,yBAAKA,UAAU,SACX,4BAAKD,EAAMO,OAEf,yBAAKN,UAAU,SACX,4BAAKD,EAAMO,QAGnB,yBAAKN,UAAU,WAAWD,EAAMQ,UAChC,yBAAKP,UAAU,UACX,yBAAKQ,IAAKT,EAAMU,UAAWC,IAAKX,EAAMY,gBCzBpDC,EAAQ,CACZ,CACEN,KAAM,UACNJ,KAAM,WACNW,QAAS,oCACP,2BACE,uCADF,kRAGA,oHAIFJ,UAAW,wBACXE,SAAU,yCAEZ,CACEL,KAAM,cACNJ,KAAM,eACNW,QAAS,2BACL,2CADK,+KAGTJ,UAAW,4BACXE,SAAU,6EAEZ,CACEL,KAAM,cACNJ,KAAM,eACNW,QAAS,2BACL,2CADK,qIAGTJ,UAAW,wBACXE,SAAU,0CAwBCG,MApBf,WAEE,OACE,yBAAKd,UAAU,qBACb,yBAAKA,UAAU,WACZY,EAAMG,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CACdC,IAAKD,EAAEV,KACPA,KAAMU,EAAEV,KACRJ,KAAMc,EAAEd,KACRO,UAAWO,EAAEP,UACbE,SAAUK,EAAEL,UAEXK,EAAEH,e,eCxCOK,QACW,cAA7Bf,OAAOC,SAASe,UAEe,UAA7BhB,OAAOC,SAASe,UAEhBhB,OAAOC,SAASe,SAASC,MACvB,2D,UCMSC,EApBI,WAEf,OACE,yBAAKrB,UAAU,oBACb,yBAAKA,UAAU,UACX,wBAAIsB,MAAO,CAACC,SAAU,SAAS,uBAAGC,KAAK,MAAR,iBAC/B,uBAAGF,MAAO,CAACC,SAAU,UAArB,UAAsC,uBAAGC,KAAK,0BAAR,oBACtC,uBAAGF,MAAO,CAACC,SAAU,YAArB,YAA0C,uBAAGC,KAAK,mCAAR,kBAE9C,yBAAKxB,UAAU,WACX,yBAAKA,UAAU,OACf,yBAAKA,UAAU,OACf,yBAAKA,UAAU,UCFZyB,EAVC,WACZ,OACA,yBAAKzB,UAAU,qBACX,yBAAKA,UAAU,WACX,6C,MCGZ0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAAC3B,KAAK,WAAW4B,UAAWL,IACxC,kBAAC,IAAD,CAAOvB,KAAK,IAAI4B,UAAWhB,OAInCiB,SAASC,eAAe,SH8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a17cad0.chunk.js","sourcesContent":["import React, {FC} from 'react';\r\n\r\nimport './Card.scss';\r\n\r\ninterface ICardProps {\r\n    name: string;\r\n    imageHref: string;\r\n    imageAlt: string;\r\n    path: string;\r\n}\r\n\r\nconst setPath = (path: string) => {\r\n    window.location.hash = path;\r\n}\r\n\r\nconst Card: FC<ICardProps> = (props) => {\r\n    //const maxHeight = props.maxHeight ?? \"30em\";\r\n    return (\r\n        <>\r\n            <div className=\"card\" onClick={() => setPath(props.path)}>\r\n                <div className=\"title-container\">\r\n                    <div className=\"title\">\r\n                        <h1>{props.name}</h1>\r\n                    </div>\r\n                    <div className=\"title\">\r\n                        <h1>{props.name}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"content\">{props.children}</div>\r\n                <div className=\"images\">\r\n                    <img src={props.imageHref} alt={props.imageAlt} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\n\nimport './Home.scss';\nimport Card from '../Components/Card';\n\nconst cards = [\n  {\n    name: \"siteLab\",\n    path: \"/siteLab\",\n    content: <>\n      <p>\n        <em>siteLab</em> is a Unity framework that allows Unsigned Studio to easily develop high quality real-time visualisations. It provides a consistent look and feel across projects, with common tools and affordances. siteLab can also be customised with project specific tools and branding.\n      </p>\n      <p>\n        siteLab has been used in over 100 projects, and won the Good Design 2020 Gold Award. \n      </p>\n      </>,\n    imageHref: \"/images/sitelab_1.png\",\n    imageAlt: \"siteLab being used on a tablet device\",\n  },  \n  {\n    name: \"Particulate\",\n    path: \"/Particulate\",\n    content: <p>\n        <em>Particulate</em> is a Unity plugin to render Potree formatted pointclouds. It can stream pointclouds of any size or level of detail to any device, without impacting framerates or quality.\n      </p>,\n    imageHref: \"/images/particulate_1.png\",\n    imageAlt: \"An image of the inside of a pump station, the geometry rendered as points\",\n  },\n  {\n    name: \"BAC Skywalk\",\n    path: \"/BAC_Skywalk\",\n    content: <p>\n        <em>BAC Skywalk</em> is a VR project built for Brisbane Airport Coroporation, built to explore different wayfinding options in a spatial environment. \n      </p>,\n    imageHref: \"/images/skywalk_1.png\",\n    imageAlt: \"siteLab being used on a tablet device\",\n  },\n]\n\nfunction Home() {\n\n  return (\n    <div className=\"content-container\">\n      <div className=\"content\">\n        {cards.map(c => <Card \n          key={c.name}\n          name={c.name}\n          path={c.path}\n          imageHref={c.imageHref}\n          imageAlt={c.imageAlt}\n        >\n          {c.content}\n        </Card>)}\n      </div>    \n    </div>\n   \n  );\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FC } from \"react\";\r\nimport './Header.scss';\r\n\r\n\r\nconst Header: FC = () => {\r\n    \r\n    return (\r\n      <div className=\"header-container\">          \r\n        <div className=\"header\">    \r\n            <h1 style={{gridArea: \"name\"}}><a href=\"#/\" >Chris Dirkis</a></h1>\r\n            <p style={{gridArea: \"email\"}}>email: <a href=\"mailto:me@chrisdirk.is\">me@chrisdirk.is</a></p>\r\n            <p style={{gridArea: \"twitter\"}}>twitter: <a href=\"https://twitter.com/chrisdirkis\">@chrisdirkis</a></p>\r\n        </div>\r\n        <div className=\"stripes\">\r\n            <div className=\"s3\" />\r\n            <div className=\"s2\" />\r\n            <div className=\"s1\" />\r\n        </div>\r\n      </div>\r\n    );\r\n    \r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport \"./Home.scss\";\r\n\r\nconst siteLab = () => {\r\n    return (\r\n    <div className=\"content-container\">\r\n        <div className=\"content\">\r\n            <p>lol siteLab</p>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default siteLab;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Home from './Pages/Home';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\nimport Header from './Components/Header';\nimport siteLab from './Pages/siteLab';\n\nimport './Root.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />   \n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/siteLab\" component={siteLab} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}